# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nv4IGmIJXSAajts985v1nMVziKswzSTM
"""

!pip install transformers

from transformers import AutoTokenizer, AutoModelForSequenceClassification
import torch
import requests
from bs4 import BeautifulSoup
import re
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import_bert_tokenizer = AutoTokenizer.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')

bert_model = AutoModelForSequenceClassification.from_pretrained('nlptown/bert-base-multilingual-uncased-sentiment')

"""## Collecting the reviews using Beautiful soup form yelp website of 14 pages reviews"""

reviews = ""
i = 10
while i <= 140:
  page_reviews = requests.get(f'https://www.yelp.com/biz/social-brew-cafe-pyrmont?start={i}')
  reviews += page_reviews.text
  i+=10

reviews

len(reviews)

soup = BeautifulSoup(reviews, 'html.parser')
regex = re.compile('.*comment.*')
results = soup.find_all('p', {'class':regex})
customer_reviews = [result.text for result in results]

customer_reviews[0]

store_review = customer_reviews[1]
store_review_score = sentiment_analysis(reviews_data['reviews'].iloc[1])
print(f"{store_review} --> the sentiment score is --> {store_review_score}")

if store_review_score >= 4:
  print('POSITIVE REVIEW')
elif store_review_score == 3:
  print("NEUTRAL REVIEW")
else :
  print("NEGATIVE REVIEW")

reviews_data = pd.DataFrame(np.array(customer_reviews),columns=['reviews'])

reviews_data.sample(5)

reviews_data.shape

def sentiment_analysis(review):
  tokens = import_bert_tokenizer.encode(review,return_tensors='pt')
  result = bert_model(tokens)
  return int(torch.argmax(result.logits)) + 1

reviews_data['sentimental_score'] = reviews_data['reviews'].apply(lambda x : sentiment_analysis(x[:512]))

reviews_data.head()

def sentimental_string_score(reviews):
  if reviews >= 4:
    return 'POSITIVE REVIEW'
  elif reviews == 3:
    return 'NEUTRAL REVIEW'
  else :
    return 'NEGATIVE REVIEW'
reviews_data['sentimental_string_score'] = reviews_data['sentimental_score'].apply(sentimental_string_score)

reviews_data.sample(5)

reviews_data['sentimental_score'].value_counts()

reviews_data['sentimental_string_score'].value_counts()

colors = ['pink', 'silver', 'steelblue']
explode = (0.07, 0.05, 0.08)
reviews_data.groupby(['sentimental_string_score']).sum().plot(kind='pie', y='sentimental_score', autopct='%1.0f%%',
                                colors = colors, explode=explode,
                                title='Reviews Given By The Customers')

"""#### Conclusion : Tha data is extracted form yelp website using beautifulsoup, the sentimental score of the extracted reviews are generated using pretrained bert model the majority i.e 93%  reviews given by the customers are positive and only 3% of the customers gave bad reviews and 5% of the custmoners are just satisfied with the food and restaurant"""